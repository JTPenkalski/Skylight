//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class SkylightClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "https://localhost:7266/";

    }

    /**
     * @return OK
     */
    addCurrentAlerts(body: AddCurrentAlertsCommand, cancelToken?: CancelToken): Promise<AddCurrentAlertsResponse> {
        let url_ = this.baseUrl + "/api/v1/Alerts/AddCurrentAlerts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddCurrentAlerts(_response);
        });
    }

    protected processAddCurrentAlerts(response: AxiosResponse): Promise<AddCurrentAlertsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<AddCurrentAlertsResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AddCurrentAlertsResponse>(null as any);
    }

    /**
     * @return OK
     */
    getCurrentAlertCountByType(body: GetCurrentAlertCountByTypeQuery, cancelToken?: CancelToken): Promise<GetCurrentAlertCountByTypeResponse> {
        let url_ = this.baseUrl + "/api/v1/Alerts/GetCurrentAlertCountByType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCurrentAlertCountByType(_response);
        });
    }

    protected processGetCurrentAlertCountByType(response: AxiosResponse): Promise<GetCurrentAlertCountByTypeResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<GetCurrentAlertCountByTypeResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetCurrentAlertCountByTypeResponse>(null as any);
    }

    /**
     * @return OK
     */
    getCurrentAlertObservationTypesByType(body: GetCurrentAlertObservationTypesByTypeQuery, cancelToken?: CancelToken): Promise<GetCurrentAlertObservationTypesByTypeResponse> {
        let url_ = this.baseUrl + "/api/v1/Alerts/GetCurrentAlertObservationTypesByType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCurrentAlertObservationTypesByType(_response);
        });
    }

    protected processGetCurrentAlertObservationTypesByType(response: AxiosResponse): Promise<GetCurrentAlertObservationTypesByTypeResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<GetCurrentAlertObservationTypesByTypeResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetCurrentAlertObservationTypesByTypeResponse>(null as any);
    }

    /**
     * @return OK
     */
    getCurrentAlertParameterValuesByParameter(body: GetCurrentAlertParameterValuesByParameterQuery, cancelToken?: CancelToken): Promise<GetCurrentAlertParameterValuesByParameterResponse> {
        let url_ = this.baseUrl + "/api/v1/Alerts/GetCurrentAlertParameterValuesByParameter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCurrentAlertParameterValuesByParameter(_response);
        });
    }

    protected processGetCurrentAlertParameterValuesByParameter(response: AxiosResponse): Promise<GetCurrentAlertParameterValuesByParameterResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<GetCurrentAlertParameterValuesByParameterResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetCurrentAlertParameterValuesByParameterResponse>(null as any);
    }

    /**
     * @return OK
     */
    getCurrentAlertsByType(body: GetCurrentAlertsByTypeQuery, cancelToken?: CancelToken): Promise<GetCurrentAlertsByTypeResponse> {
        let url_ = this.baseUrl + "/api/v1/Alerts/GetCurrentAlertsByType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCurrentAlertsByType(_response);
        });
    }

    protected processGetCurrentAlertsByType(response: AxiosResponse): Promise<GetCurrentAlertsByTypeResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<GetCurrentAlertsByTypeResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetCurrentAlertsByTypeResponse>(null as any);
    }

    /**
     * @return OK
     */
    getHistoricalAlertCountsByType(body: GetHistoricalAlertCountsByTypeQuery, cancelToken?: CancelToken): Promise<GetHistoricalAlertCountsByTypeResponse> {
        let url_ = this.baseUrl + "/api/v1/Alerts/GetHistoricalAlertCountsByType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetHistoricalAlertCountsByType(_response);
        });
    }

    protected processGetHistoricalAlertCountsByType(response: AxiosResponse): Promise<GetHistoricalAlertCountsByTypeResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<GetHistoricalAlertCountsByTypeResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetHistoricalAlertCountsByTypeResponse>(null as any);
    }
}

export interface AddCurrentAlertsCommand {

    [key: string]: any;
}

export interface AddCurrentAlertsResponse {
    addedAlerts: AddedAlert[];

    [key: string]: any;
}

export interface AddedAlert {
    alertCode: string;
    alertName: string;
    alertLevel: AlertLevel;
    senderCode: string;
    senderName: string;
    headline: string;
    description: string;
    instruction: string;
    sent: Date;
    effective: Date;
    expires: Date;
    type: AlertMessageType;
    severity: AlertSeverity;
    certainty: AlertCertainty;
    urgency: AlertUrgency;
    response: AlertResponse;
    zones: string[];
    parameters: AddedAlertParameter[];

    [key: string]: any;
}

export interface AddedAlertParameter {
    key: AlertParameterKey;
    value: string;

    [key: string]: any;
}

export enum AlertCertainty {
    Unknown = "Unknown",
    Unlikely = "Unlikely",
    Possible = "Possible",
    Likely = "Likely",
    Observed = "Observed",
}

export enum AlertLevel {
    None = "None",
    Advisory = "Advisory",
    Watch = "Watch",
    Warning = "Warning",
}

export enum AlertMessageType {
    Alert = "Alert",
    Update = "Update",
    Cancellation = "Cancellation",
    Error = "Error",
}

export enum AlertParameterKey {
    TypeModifier = "TypeModifier",
    EventMotionDescription = "EventMotionDescription",
    EventSpeed = "EventSpeed",
    EventDirection = "EventDirection",
    EventPosition = "EventPosition",
    EventEndingTime = "EventEndingTime",
    WindThreat = "WindThreat",
    MaxWindGust = "MaxWindGust",
    HailThreat = "HailThreat",
    MaxHailSize = "MaxHailSize",
    ThunderstormDamageThreat = "ThunderstormDamageThreat",
    TornadoDamageThreat = "TornadoDamageThreat",
    TornadoDetection = "TornadoDetection",
    WaterspoutDetection = "WaterspoutDetection",
    FlashFloodDamageThreat = "FlashFloodDamageThreat",
    FlashFloodDetection = "FlashFloodDetection",
    SnowSquallDetection = "SnowSquallDetection",
    SnowSquallImpact = "SnowSquallImpact",
    ValidTimeEventCode = "ValidTimeEventCode",
    Action = "Action",
    OfficeId = "OfficeId",
    Phenomena = "Phenomena",
    Significance = "Significance",
    EventTrackingNumber = "EventTrackingNumber",
    EventBeginningDate = "EventBeginningDate",
    EventEndingDate = "EventEndingDate",
}

export enum AlertResponse {
    None = "None",
    AllClear = "AllClear",
    Assess = "Assess",
    Monitor = "Monitor",
    Avoid = "Avoid",
    Execute = "Execute",
    Prepare = "Prepare",
    Evacuate = "Evacuate",
    Shelter = "Shelter",
}

export enum AlertSeverity {
    Unknown = "Unknown",
    Minor = "Minor",
    Moderate = "Moderate",
    Severe = "Severe",
    Extreme = "Extreme",
}

export enum AlertUrgency {
    Unknown = "Unknown",
    Past = "Past",
    Future = "Future",
    Expected = "Expected",
    Immediate = "Immediate",
}

export interface CurrentAlert {
    senderCode: string;
    senderName: string;
    headline: string;
    description: string;
    instruction: string;
    sent: Date;
    effective: Date;
    expires: Date;
    severity: AlertSeverity;
    certainty: AlertCertainty;
    urgency: AlertUrgency;
    response: AlertResponse;
    locations: CurrentAlertLocation[];
    parameters: CurrentAlertParameter[];

    [key: string]: any;
}

export interface CurrentAlertLocation {
    zone: string;
    name: string;

    [key: string]: any;
}

export interface CurrentAlertObservationTypeCount {
    observationType: string;
    count: number;

    [key: string]: any;
}

export interface CurrentAlertParameter {
    key: AlertParameterKey;
    value: string;

    [key: string]: any;
}

export interface CurrentAlertParameterCount {
    parameterValue: string;
    count: number;

    [key: string]: any;
}

export interface GetCurrentAlertCountByTypeQuery {
    code: string;

    [key: string]: any;
}

export interface GetCurrentAlertCountByTypeResponse {
    count: number;
    alertCode: string;
    alertName: string;
    alertLevel: AlertLevel;

    [key: string]: any;
}

export interface GetCurrentAlertObservationTypesByTypeQuery {
    code: string;

    [key: string]: any;
}

export interface GetCurrentAlertObservationTypesByTypeResponse {
    alertName: string;
    observationTypes: string[];
    observationTypeCounts: CurrentAlertObservationTypeCount[];

    [key: string]: any;
}

export interface GetCurrentAlertParameterValuesByParameterQuery {
    parameterKey: AlertParameterKey;

    [key: string]: any;
}

export interface GetCurrentAlertParameterValuesByParameterResponse {
    parameterValues: string[];
    parameterCounts: CurrentAlertParameterCount[];

    [key: string]: any;
}

export interface GetCurrentAlertsByTypeQuery {
    code: string;

    [key: string]: any;
}

export interface GetCurrentAlertsByTypeResponse {
    count: number;
    alertCode: string;
    alertName: string;
    alertLevel: AlertLevel;
    currentAlerts: CurrentAlert[];

    [key: string]: any;
}

export interface GetHistoricalAlertCountsByTypeQuery {
    code: string;
    start: Date;
    pastHours: number;

    [key: string]: any;
}

export interface GetHistoricalAlertCountsByTypeResponse {
    alertName: string;
    alertLevel: AlertLevel;
    alertCounts: HistoricalAlertCount[];

    [key: string]: any;
}

export interface HistoricalAlertCount {
    dateTime: Date;
    count: number;

    [key: string]: any;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}