//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class SkylightClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "https://localhost:7266/";

    }

    /**
     * @return OK
     */
    addCurrentAlerts(body: AddCurrentAlertsCommand, cancelToken?: CancelToken): Promise<AddCurrentAlertsResponse> {
        let url_ = this.baseUrl + "/api/v1/Alerts/AddCurrentAlerts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddCurrentAlerts(_response);
        });
    }

    protected processAddCurrentAlerts(response: AxiosResponse): Promise<AddCurrentAlertsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<AddCurrentAlertsResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AddCurrentAlertsResponse>(null as any);
    }

    /**
     * @return OK
     */
    getCurrentAlertsByType(body: GetCurrentAlertsByTypeQuery, cancelToken?: CancelToken): Promise<GetCurrentAlertsByTypeResponse> {
        let url_ = this.baseUrl + "/api/v1/Alerts/GetCurrentAlertsByType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCurrentAlertsByType(_response);
        });
    }

    protected processGetCurrentAlertsByType(response: AxiosResponse): Promise<GetCurrentAlertsByTypeResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<GetCurrentAlertsByTypeResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetCurrentAlertsByTypeResponse>(null as any);
    }
}

export interface AddCurrentAlertsCommand {

    [key: string]: any;
}

export interface AddCurrentAlertsResponse {
    currentAlerts: CurrentAlert[];

    [key: string]: any;
}

export interface CurrentAlert {
    alertCode: string;
    alertName: string;
    alertLevel: number;
    senderCode: string;
    senderName: string;
    headline: string;
    description: string;
    instruction: string;
    sent: Date;
    effective: Date;
    expires: Date;
    type: number;
    severity: number;
    certainty: number;
    urgency: number;
    response: number;
    zones: string[];

    [key: string]: any;
}

export interface CurrentAlertByType {
    senderCode: string;
    senderName: string;
    headline: string;
    description: string;
    instruction: string;
    sent: Date;
    effective: Date;
    expires: Date;
    type: number;
    severity: number;
    certainty: number;
    urgency: number;
    response: number;
    zones: string[];

    [key: string]: any;
}

export interface GetCurrentAlertsByTypeQuery {
    code: string;

    [key: string]: any;
}

export interface GetCurrentAlertsByTypeResponse {
    count: number;
    alertCode: string;
    alertName: string;
    alertLevel: number;
    currentAlerts: CurrentAlertByType[];

    [key: string]: any;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}
