// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use 'sass:map';
@use '@angular/material' as mat;

// Include the common styles for Angular Material. We include this here so that you only have to load a single CSS file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Privately define the hues for each palette using the Material Design palette generator.
// Alternatively, see the provided palettes available in palette.scss within the package directory.
$_skylight-palette: (
  50: #ebecf5,
  100: #ccd2df,
  200: #adb4c5,
  300: #8e97ac,
  400: #778198,
  500: #606c86,
  600: #535e76,
  700: #424c60,
  800: #323a4a,
  900: #202633, // Primary color used on palette generator.
  contrast: (
    50: black,
    100: black,
    200: black,
    300: white,
    400: white,
    500: white,
    600: white,
    700: white,
    800: white,
    900: white
  )
 );

// Privately define the color palettes for the theme using the Material Design palettes available in palette.scss.
// For each palette, you can optionally specify a default, lighter, and darker hue. Available color palettes: https://material.io/design/color/
// For accent colors, use the SCSS feature unquoted strings.
$_skylight-palette-primary: mat.define-palette($_skylight-palette);
$_skylight-palette-accent: mat.define-palette(mat.$light-blue-palette, A200, A100, A400);
$_skylight-palette-warn: mat.define-palette(mat.$red-palette);

// Privately define the background and foreground configuration properties for the theme.
// This is how we achieve greater customization in the following step where the actual theme object is defined.
// These are based off the default definition for a dark theme in palette.scss.
$_skylight-theme-foreground: (
  base: white,
  divider: rgba(white, 0.12),
  dividers:  rgba(white, 0.12),
  disabled: rgba(white, 0.5),
  disabled-button: rgba(white, 0.3),
  disabled-text: rgba(white, 0.5),
  elevation: black,
  hint-text: rgba(white, 0.5),
  secondary-text: rgba(white, 0.7),
  icon: white,
  icons: white,
  text: white,
  slider-min: white,
  slider-off: rgba(white, 0.3),
  slider-off-active: rgba(white, 0.3),
);

$_skylight-theme-background: (
  status-bar: black,
  app-bar: map.get($_skylight-palette, 900),
  background: map.get($_skylight-palette, 800),
  hover: rgba(white, 0.04),
  card: map.get($_skylight-palette, 700),
  dialog: map.get($_skylight-palette, 700),
  disabled-button: rgba(white, 0.12),
  raised-button: map.get($_skylight-palette, 700),
  focused-button: rgba(white, 0.12),
  selected-button: map.get($_skylight-palette, 800),
  selected-disabled-button: map.get($_skylight-palette, 700),
  disabled-button-toggle: black,
  unselected-chip: map.get($_skylight-palette, 600),
  disabled-list-option: rgba(white, 0.12),
  tooltip: map.get($_skylight-palette, 500)
);

// Create the theme object.
// A theme consists of configurations for color, typography, and density options.
// Note: This is a custom theme implementation to allow for greater control of component/background colors.
// See https://github.com/angular/components/issues/6244 for more info.
$skylight-theme: (
  color: (
    primary: $_skylight-palette-primary,
    accent: $_skylight-palette-accent,
    warn: $_skylight-palette-warn,
    is-dark: true,
    foreground: $_skylight-theme-foreground,
    background: $_skylight-theme-background
  ),
  typography: mat.define-typography-config(),
  density: 0
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component that you are using.
@include mat.all-component-themes($skylight-theme);

/// Gets a color from the given palette of the current theme.
/// @param {'primary' | 'accent' | 'warn'} $palette - The name of the palette to use.
/// @param {String} $hue - The hue of the color, based on the Material specification.
/// @param {int} $opacity - The opacity of the color.
/// @returns {Color} - The final color from the current theme.
@function color($palette, $hue, $opacity: null)
{
  // Get the color config from the theme.
  $color-config: mat.get-color-config($skylight-theme);

  // Get the color palette from the color config.
  $palette: map.get($color-config, $palette);

  // Get the specific color requested from this palette.
  $color: mat.get-color-from-palette($palette, $hue, $opacity);

  @return $color;
}

/// Gets a contrast color from the given palette of the current theme.
/// Contrast colors serve as the text color when using a hue as a background color.
/// @param {'primary' | 'accent' | 'warn'} $palette - The name of the palette to use.
/// @param {String} $hue - The hue of the color, based on the Material specification.
/// @param {int} $opacity - The opacity of the color.
/// @returns {Color} - The final color from the current theme.
@function contrast-color($palette, $hue, $opacity: null)
{
  // Get the color config from the theme.
  $color-config: mat.get-color-config($skylight-theme);

  // Get the color palette from the color config.
  $palette: map.get($color-config, $palette);

  // Get the specific color requested from this palette.
  $color: mat.get-color-from-palette($palette, '#{$hue}-contrast', $opacity);

  @return $color;
}
