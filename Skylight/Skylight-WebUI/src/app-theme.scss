// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use 'sass:map';
@use '@angular/material' as mat;

// Include the common styles for Angular Material. We include this here so that you only have to load a single CSS file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Privately define the palettes for your theme using the Material Design palettes available in palette.scss.
// For each palette, you can optionally specify a default, lighter, and darker hue. Available color palettes: https://material.io/design/color/
// For accent colors, use the SCSS feature unquoted strings.
$_theme-app-palette-primary: mat.define-palette(mat.$gray-palette);
$_theme-app-palette-accent: mat.define-palette(mat.$light-blue-palette, A200, A100, A400);
$_theme-app-palette-warn: mat.define-palette(mat.$red-palette);

// Create the theme object.
// A theme consists of configurations for individual theming systems such as "color" or "typography".
$theme-app: mat.define-dark-theme((color: (primary: $_theme-app-palette-primary, accent: $_theme-app-palette-accent, warn: $_theme-app-palette-warn)));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component that you are using.
@include mat.all-component-themes($theme-app);

/// Gets a color from the given palette of the current theme.
/// @param {'primary' | 'accent' | 'warn'} $palette - The name of the palette to use.
/// @param {String} $hue - The hue of the color, based on the Material specification.
/// @param {int} $opacity - The opacity of the color.
/// @returns {Color} - The final color from the current theme.
@function color($palette, $hue, $opacity: null)
{
  // Get the color config from the theme.
  $color-config: mat.get-color-config($theme-app);

  // Get the color palette from the color config.
  $palette: map.get($color-config, $palette);

  // Get the specific color requested from this palette.
  $color: mat.get-color-from-palette($palette, $hue, $opacity);

  @return $color;
}

/// Gets a font family from the current theme.
/// @returns {String} - The font family from the current theme.
@function typography()
{
  // Get the typography config from the theme.
  $typography-config: mat.get-typography-config($theme-app);

  // Get the font from the typography config.
  $font-family: mat.font-family($typography-config);

  @return $font-family;
}
