//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { BaseModel } from 'web/models';
import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface ILocationClient {
    /**
     * @param body (optional) 
     * @return Created
     */
    locationPOST(body: Location | undefined): Observable<Location>;
    /**
     * @return Success
     */
    locationAll(): Observable<Location[]>;
    /**
     * @return Success
     */
    locationGET(id: number): Observable<Location>;
    /**
     * @param body (optional) 
     * @return No Content
     */
    locationPUT(id: number, body: Location | undefined): Observable<void>;
    /**
     * @return No Content
     */
    locationDELETE(id: number): Observable<void>;
}

@Injectable()
export class LocationClient implements ILocationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    locationPOST(body: Location | undefined): Observable<Location> {
        let url_ = this.baseUrl + "/api/v1/Location";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLocationPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLocationPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Location>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Location>;
        }));
    }

    protected processLocationPOST(response: HttpResponseBase): Observable<Location> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = Location.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    locationAll(): Observable<Location[]> {
        let url_ = this.baseUrl + "/api/v1/Location";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLocationAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLocationAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Location[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Location[]>;
        }));
    }

    protected processLocationAll(response: HttpResponseBase): Observable<Location[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Location.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    locationGET(id: number): Observable<Location> {
        let url_ = this.baseUrl + "/api/v1/Location/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLocationGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLocationGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Location>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Location>;
        }));
    }

    protected processLocationGET(response: HttpResponseBase): Observable<Location> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Location.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    locationPUT(id: number, body: Location | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/Location/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLocationPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLocationPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processLocationPUT(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return No Content
     */
    locationDELETE(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/Location/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLocationDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLocationDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processLocationDELETE(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IWeatherClient {
    /**
     * @param body (optional) 
     * @return Created
     */
    weatherPOST(body: Weather | undefined): Observable<Weather>;
    /**
     * @return Success
     */
    weatherAll(): Observable<Weather[]>;
    /**
     * @return Success
     */
    weatherGET(id: number): Observable<Weather>;
    /**
     * @param body (optional) 
     * @return No Content
     */
    weatherPUT(id: number, body: Weather | undefined): Observable<void>;
    /**
     * @return No Content
     */
    weatherDELETE(id: number): Observable<void>;
}

@Injectable()
export class WeatherClient implements IWeatherClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    weatherPOST(body: Weather | undefined): Observable<Weather> {
        let url_ = this.baseUrl + "/api/v1/Weather";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Weather>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Weather>;
        }));
    }

    protected processWeatherPOST(response: HttpResponseBase): Observable<Weather> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = Weather.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    weatherAll(): Observable<Weather[]> {
        let url_ = this.baseUrl + "/api/v1/Weather";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Weather[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Weather[]>;
        }));
    }

    protected processWeatherAll(response: HttpResponseBase): Observable<Weather[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Weather.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    weatherGET(id: number): Observable<Weather> {
        let url_ = this.baseUrl + "/api/v1/Weather/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Weather>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Weather>;
        }));
    }

    protected processWeatherGET(response: HttpResponseBase): Observable<Weather> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Weather.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    weatherPUT(id: number, body: Weather | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/Weather/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processWeatherPUT(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return No Content
     */
    weatherDELETE(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/Weather/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processWeatherDELETE(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IWeatherAlertClient {
    /**
     * @param body (optional) 
     * @return Created
     */
    weatherAlertPOST(body: WeatherAlert | undefined): Observable<WeatherAlert>;
    /**
     * @return Success
     */
    weatherAlertAll(): Observable<WeatherAlert[]>;
    /**
     * @return Success
     */
    weatherAlertGET(id: number): Observable<WeatherAlert>;
    /**
     * @param body (optional) 
     * @return No Content
     */
    weatherAlertPUT(id: number, body: WeatherAlert | undefined): Observable<void>;
    /**
     * @return No Content
     */
    weatherAlertDELETE(id: number): Observable<void>;
}

@Injectable()
export class WeatherAlertClient implements IWeatherAlertClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    weatherAlertPOST(body: WeatherAlert | undefined): Observable<WeatherAlert> {
        let url_ = this.baseUrl + "/api/v1/WeatherAlert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherAlertPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherAlertPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WeatherAlert>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WeatherAlert>;
        }));
    }

    protected processWeatherAlertPOST(response: HttpResponseBase): Observable<WeatherAlert> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = WeatherAlert.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    weatherAlertAll(): Observable<WeatherAlert[]> {
        let url_ = this.baseUrl + "/api/v1/WeatherAlert";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherAlertAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherAlertAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WeatherAlert[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WeatherAlert[]>;
        }));
    }

    protected processWeatherAlertAll(response: HttpResponseBase): Observable<WeatherAlert[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherAlert.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    weatherAlertGET(id: number): Observable<WeatherAlert> {
        let url_ = this.baseUrl + "/api/v1/WeatherAlert/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherAlertGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherAlertGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WeatherAlert>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WeatherAlert>;
        }));
    }

    protected processWeatherAlertGET(response: HttpResponseBase): Observable<WeatherAlert> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WeatherAlert.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    weatherAlertPUT(id: number, body: WeatherAlert | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/WeatherAlert/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherAlertPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherAlertPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processWeatherAlertPUT(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return No Content
     */
    weatherAlertDELETE(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/WeatherAlert/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherAlertDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherAlertDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processWeatherAlertDELETE(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IWeatherAlertModifierClient {
    /**
     * @param body (optional) 
     * @return Created
     */
    weatherAlertModifierPOST(body: WeatherAlertModifier | undefined): Observable<WeatherAlertModifier>;
    /**
     * @return Success
     */
    weatherAlertModifierAll(): Observable<WeatherAlertModifier[]>;
    /**
     * @return Success
     */
    weatherAlertModifierGET(id: number): Observable<WeatherAlertModifier>;
    /**
     * @param body (optional) 
     * @return No Content
     */
    weatherAlertModifierPUT(id: number, body: WeatherAlertModifier | undefined): Observable<void>;
    /**
     * @return No Content
     */
    weatherAlertModifierDELETE(id: number): Observable<void>;
}

@Injectable()
export class WeatherAlertModifierClient implements IWeatherAlertModifierClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    weatherAlertModifierPOST(body: WeatherAlertModifier | undefined): Observable<WeatherAlertModifier> {
        let url_ = this.baseUrl + "/api/v1/WeatherAlertModifier";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherAlertModifierPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherAlertModifierPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WeatherAlertModifier>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WeatherAlertModifier>;
        }));
    }

    protected processWeatherAlertModifierPOST(response: HttpResponseBase): Observable<WeatherAlertModifier> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = WeatherAlertModifier.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    weatherAlertModifierAll(): Observable<WeatherAlertModifier[]> {
        let url_ = this.baseUrl + "/api/v1/WeatherAlertModifier";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherAlertModifierAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherAlertModifierAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WeatherAlertModifier[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WeatherAlertModifier[]>;
        }));
    }

    protected processWeatherAlertModifierAll(response: HttpResponseBase): Observable<WeatherAlertModifier[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherAlertModifier.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    weatherAlertModifierGET(id: number): Observable<WeatherAlertModifier> {
        let url_ = this.baseUrl + "/api/v1/WeatherAlertModifier/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherAlertModifierGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherAlertModifierGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WeatherAlertModifier>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WeatherAlertModifier>;
        }));
    }

    protected processWeatherAlertModifierGET(response: HttpResponseBase): Observable<WeatherAlertModifier> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WeatherAlertModifier.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    weatherAlertModifierPUT(id: number, body: WeatherAlertModifier | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/WeatherAlertModifier/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherAlertModifierPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherAlertModifierPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processWeatherAlertModifierPUT(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return No Content
     */
    weatherAlertModifierDELETE(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/WeatherAlertModifier/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherAlertModifierDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherAlertModifierDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processWeatherAlertModifierDELETE(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IWeatherEventClient {
    /**
     * @param body (optional) 
     * @return Created
     */
    weatherEventPOST(body: WeatherEvent | undefined): Observable<WeatherEvent>;
    /**
     * @return Success
     */
    weatherEventAll(): Observable<WeatherEvent[]>;
    /**
     * @return Success
     */
    weatherEventGET(id: number): Observable<WeatherEvent>;
    /**
     * @param body (optional) 
     * @return No Content
     */
    weatherEventPUT(id: number, body: WeatherEvent | undefined): Observable<void>;
    /**
     * @return No Content
     */
    weatherEventDELETE(id: number): Observable<void>;
}

@Injectable()
export class WeatherEventClient implements IWeatherEventClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    weatherEventPOST(body: WeatherEvent | undefined): Observable<WeatherEvent> {
        let url_ = this.baseUrl + "/api/v1/WeatherEvent";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherEventPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherEventPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WeatherEvent>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WeatherEvent>;
        }));
    }

    protected processWeatherEventPOST(response: HttpResponseBase): Observable<WeatherEvent> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = WeatherEvent.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    weatherEventAll(): Observable<WeatherEvent[]> {
        let url_ = this.baseUrl + "/api/v1/WeatherEvent";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherEventAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherEventAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WeatherEvent[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WeatherEvent[]>;
        }));
    }

    protected processWeatherEventAll(response: HttpResponseBase): Observable<WeatherEvent[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherEvent.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    weatherEventGET(id: number): Observable<WeatherEvent> {
        let url_ = this.baseUrl + "/api/v1/WeatherEvent/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherEventGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherEventGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WeatherEvent>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WeatherEvent>;
        }));
    }

    protected processWeatherEventGET(response: HttpResponseBase): Observable<WeatherEvent> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WeatherEvent.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    weatherEventPUT(id: number, body: WeatherEvent | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/WeatherEvent/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherEventPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherEventPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processWeatherEventPUT(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return No Content
     */
    weatherEventDELETE(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/WeatherEvent/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherEventDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherEventDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processWeatherEventDELETE(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class Location extends BaseModel implements ILocation {
    public city!: string;
    public zipCode!: string;
    public country!: string;

    constructor(data?: ILocation) {
        super(data);
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    /**
    * Initializes a new Location instance from the specified data.
    * This method is used in the serialization/deserialization process and allows for overriding in subclasses. 
    * @param _data Any object that holds the necessary properties to initialize a new Location.
    **/
    protected init(_data?: any): void {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.zipCode = _data["zipCode"] !== undefined ? _data["zipCode"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
        }
    }

    /**
     * Deserializes a JSON representation of this Location.
     * @param data Any object that holds the necessary properties to initialize a new Location.
     * @returns A deserialized Location.
     **/
    public static fromJS(data: any): Location {
        data = typeof data === 'object' ? data : {};
        let result = new Location();
        result.init(data);
        return result;
    }

    /**
     * Serializes a JSON representation of this Location.
     * @returns A serialized Location.
     **/
    public toJSON(): any {
        let data: any = {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["zipCode"] = this.zipCode !== undefined ? this.zipCode : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        return data;
    }
}

export interface ILocation {
    id?: number;
    city: string;
    zipCode: string;
    country: string;
}

export class ProblemDetails implements IProblemDetails {
    public type?: string | null;
    public title?: string | null;
    public status?: number | null;
    public detail?: string | null;
    public instance?: string | null;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    /**
    * Initializes a new ProblemDetails instance from the specified data.
    * This method is used in the serialization/deserialization process and allows for overriding in subclasses. 
    * @param _data Any object that holds the necessary properties to initialize a new ProblemDetails.
    **/
    protected init(_data?: any): void {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.detail = _data["detail"] !== undefined ? _data["detail"] : <any>null;
            this.instance = _data["instance"] !== undefined ? _data["instance"] : <any>null;
        }
    }

    /**
     * Deserializes a JSON representation of this ProblemDetails.
     * @param data Any object that holds the necessary properties to initialize a new ProblemDetails.
     * @returns A deserialized ProblemDetails.
     **/
    public static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    /**
     * Serializes a JSON representation of this ProblemDetails.
     * @returns A serialized ProblemDetails.
     **/
    public toJSON(): any {
        let data: any = {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["detail"] = this.detail !== undefined ? this.detail : <any>null;
        data["instance"] = this.instance !== undefined ? this.instance : <any>null;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;

    [key: string]: any;
}

export class Weather extends BaseModel implements IWeather {
    public name!: string;
    public description!: string;

    constructor(data?: IWeather) {
        super(data);
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    /**
    * Initializes a new Weather instance from the specified data.
    * This method is used in the serialization/deserialization process and allows for overriding in subclasses. 
    * @param _data Any object that holds the necessary properties to initialize a new Weather.
    **/
    protected init(_data?: any): void {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    /**
     * Deserializes a JSON representation of this Weather.
     * @param data Any object that holds the necessary properties to initialize a new Weather.
     * @returns A deserialized Weather.
     **/
    public static fromJS(data: any): Weather {
        data = typeof data === 'object' ? data : {};
        let result = new Weather();
        result.init(data);
        return result;
    }

    /**
     * Serializes a JSON representation of this Weather.
     * @returns A serialized Weather.
     **/
    public toJSON(): any {
        let data: any = {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data;
    }
}

export interface IWeather {
    id?: number;
    name: string;
    description: string;
}

export class WeatherAlert extends BaseModel implements IWeatherAlert {
    public name!: string;
    public description!: string;
    public value!: number;
    public isThirdParty!: boolean;

    constructor(data?: IWeatherAlert) {
        super(data);
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    /**
    * Initializes a new WeatherAlert instance from the specified data.
    * This method is used in the serialization/deserialization process and allows for overriding in subclasses. 
    * @param _data Any object that holds the necessary properties to initialize a new WeatherAlert.
    **/
    protected init(_data?: any): void {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
            this.isThirdParty = _data["isThirdParty"] !== undefined ? _data["isThirdParty"] : <any>null;
        }
    }

    /**
     * Deserializes a JSON representation of this WeatherAlert.
     * @param data Any object that holds the necessary properties to initialize a new WeatherAlert.
     * @returns A deserialized WeatherAlert.
     **/
    public static fromJS(data: any): WeatherAlert {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherAlert();
        result.init(data);
        return result;
    }

    /**
     * Serializes a JSON representation of this WeatherAlert.
     * @returns A serialized WeatherAlert.
     **/
    public toJSON(): any {
        let data: any = {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["isThirdParty"] = this.isThirdParty !== undefined ? this.isThirdParty : <any>null;
        return data;
    }
}

export interface IWeatherAlert {
    id?: number;
    name: string;
    description: string;
    value: number;
    isThirdParty: boolean;
}

export class WeatherAlertModifier extends BaseModel implements IWeatherAlertModifier {
    public name!: string;
    public description!: string;
    public bonus!: number;
    public operation!: WeatherAlertModifierOperation;

    constructor(data?: IWeatherAlertModifier) {
        super(data);
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    /**
    * Initializes a new WeatherAlertModifier instance from the specified data.
    * This method is used in the serialization/deserialization process and allows for overriding in subclasses. 
    * @param _data Any object that holds the necessary properties to initialize a new WeatherAlertModifier.
    **/
    protected init(_data?: any): void {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.bonus = _data["bonus"] !== undefined ? _data["bonus"] : <any>null;
            this.operation = _data["operation"] !== undefined ? _data["operation"] : <any>null;
        }
    }

    /**
     * Deserializes a JSON representation of this WeatherAlertModifier.
     * @param data Any object that holds the necessary properties to initialize a new WeatherAlertModifier.
     * @returns A deserialized WeatherAlertModifier.
     **/
    public static fromJS(data: any): WeatherAlertModifier {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherAlertModifier();
        result.init(data);
        return result;
    }

    /**
     * Serializes a JSON representation of this WeatherAlertModifier.
     * @returns A serialized WeatherAlertModifier.
     **/
    public toJSON(): any {
        let data: any = {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["bonus"] = this.bonus !== undefined ? this.bonus : <any>null;
        data["operation"] = this.operation !== undefined ? this.operation : <any>null;
        return data;
    }
}

export interface IWeatherAlertModifier {
    id?: number;
    name: string;
    description: string;
    bonus: number;
    operation: WeatherAlertModifierOperation;
}

export enum WeatherAlertModifierOperation {
    Add = "Add",
    Multiply = "Multiply",
    Set = "Set",
}

export class WeatherEvent extends BaseModel implements IWeatherEvent {
    public name!: string;
    public weather!: Weather;
    public startDate!: Date;
    public statistics!: WeatherEventStatistics;
    public experience!: WeatherExperience;
    public locations!: Location[];
    public alerts!: WeatherEventAlert[];
    public description?: string | null;
    public endDate?: Date | null;

    constructor(data?: IWeatherEvent) {
        super(data);
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.weather = data.weather && !(<any>data.weather).toJSON ? new Weather(data.weather) : <Weather>this.weather;
            this.statistics = data.statistics && !(<any>data.statistics).toJSON ? new WeatherEventStatistics(data.statistics) : <WeatherEventStatistics>this.statistics;
            this.experience = data.experience && !(<any>data.experience).toJSON ? new WeatherExperience(data.experience) : <WeatherExperience>this.experience;
            if (data.locations) {
                this.locations = [];
                for (let i = 0; i < data.locations.length; i++) {
                    let item = data.locations[i];
                    this.locations[i] = item && !(<any>item).toJSON ? new Location(item) : <Location>item;
                }
            }
            if (data.alerts) {
                this.alerts = [];
                for (let i = 0; i < data.alerts.length; i++) {
                    let item = data.alerts[i];
                    this.alerts[i] = item && !(<any>item).toJSON ? new WeatherEventAlert(item) : <WeatherEventAlert>item;
                }
            }
        }
        if (!data) {
            this.weather = new Weather();
            this.statistics = new WeatherEventStatistics();
            this.experience = new WeatherExperience();
            this.locations = [];
            this.alerts = [];
        }
    }

    /**
    * Initializes a new WeatherEvent instance from the specified data.
    * This method is used in the serialization/deserialization process and allows for overriding in subclasses. 
    * @param _data Any object that holds the necessary properties to initialize a new WeatherEvent.
    **/
    protected init(_data?: any): void {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.weather = _data["weather"] ? Weather.fromJS(_data["weather"]) : new Weather();
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>null;
            this.statistics = _data["statistics"] ? WeatherEventStatistics.fromJS(_data["statistics"]) : new WeatherEventStatistics();
            this.experience = _data["experience"] ? WeatherExperience.fromJS(_data["experience"]) : new WeatherExperience();
            if (Array.isArray(_data["locations"])) {
                this.locations = [] as any;
                for (let item of _data["locations"])
                    this.locations!.push(Location.fromJS(item));
            }
            else {
                this.locations = <any>null;
            }
            if (Array.isArray(_data["alerts"])) {
                this.alerts = [] as any;
                for (let item of _data["alerts"])
                    this.alerts!.push(WeatherEventAlert.fromJS(item));
            }
            else {
                this.alerts = <any>null;
            }
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>null;
        }
    }

    /**
     * Deserializes a JSON representation of this WeatherEvent.
     * @param data Any object that holds the necessary properties to initialize a new WeatherEvent.
     * @returns A deserialized WeatherEvent.
     **/
    public static fromJS(data: any): WeatherEvent {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherEvent();
        result.init(data);
        return result;
    }

    /**
     * Serializes a JSON representation of this WeatherEvent.
     * @returns A serialized WeatherEvent.
     **/
    public toJSON(): any {
        let data: any = {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["weather"] = this.weather ? this.weather.toJSON() : <any>null;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["statistics"] = this.statistics ? this.statistics.toJSON() : <any>null;
        data["experience"] = this.experience ? this.experience.toJSON() : <any>null;
        if (Array.isArray(this.locations)) {
            data["locations"] = [];
            for (let item of this.locations)
                data["locations"].push(item.toJSON());
        }
        if (Array.isArray(this.alerts)) {
            data["alerts"] = [];
            for (let item of this.alerts)
                data["alerts"].push(item.toJSON());
        }
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        return data;
    }
}

export interface IWeatherEvent {
    id?: number;
    name: string;
    weather: IWeather;
    startDate: Date;
    statistics: IWeatherEventStatistics;
    experience: IWeatherExperience;
    locations: ILocation[];
    alerts: IWeatherEventAlert[];
    description?: string | null;
    endDate?: Date | null;
}

export class WeatherEventAlert extends BaseModel implements IWeatherEventAlert {
    public alert!: WeatherAlert;
    public issuanceTime!: Date;
    public modifiers!: WeatherAlertModifier[];

    constructor(data?: IWeatherEventAlert) {
        super(data);
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.alert = data.alert && !(<any>data.alert).toJSON ? new WeatherAlert(data.alert) : <WeatherAlert>this.alert;
            if (data.modifiers) {
                this.modifiers = [];
                for (let i = 0; i < data.modifiers.length; i++) {
                    let item = data.modifiers[i];
                    this.modifiers[i] = item && !(<any>item).toJSON ? new WeatherAlertModifier(item) : <WeatherAlertModifier>item;
                }
            }
        }
        if (!data) {
            this.alert = new WeatherAlert();
            this.modifiers = [];
        }
    }

    /**
    * Initializes a new WeatherEventAlert instance from the specified data.
    * This method is used in the serialization/deserialization process and allows for overriding in subclasses. 
    * @param _data Any object that holds the necessary properties to initialize a new WeatherEventAlert.
    **/
    protected init(_data?: any): void {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.alert = _data["alert"] ? WeatherAlert.fromJS(_data["alert"]) : new WeatherAlert();
            this.issuanceTime = _data["issuanceTime"] ? new Date(_data["issuanceTime"].toString()) : <any>null;
            if (Array.isArray(_data["modifiers"])) {
                this.modifiers = [] as any;
                for (let item of _data["modifiers"])
                    this.modifiers!.push(WeatherAlertModifier.fromJS(item));
            }
            else {
                this.modifiers = <any>null;
            }
        }
    }

    /**
     * Deserializes a JSON representation of this WeatherEventAlert.
     * @param data Any object that holds the necessary properties to initialize a new WeatherEventAlert.
     * @returns A deserialized WeatherEventAlert.
     **/
    public static fromJS(data: any): WeatherEventAlert {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherEventAlert();
        result.init(data);
        return result;
    }

    /**
     * Serializes a JSON representation of this WeatherEventAlert.
     * @returns A serialized WeatherEventAlert.
     **/
    public toJSON(): any {
        let data: any = {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["alert"] = this.alert ? this.alert.toJSON() : <any>null;
        data["issuanceTime"] = this.issuanceTime ? this.issuanceTime.toISOString() : <any>null;
        if (Array.isArray(this.modifiers)) {
            data["modifiers"] = [];
            for (let item of this.modifiers)
                data["modifiers"].push(item.toJSON());
        }
        return data;
    }
}

export interface IWeatherEventAlert {
    id?: number;
    alert: IWeatherAlert;
    issuanceTime: Date;
    modifiers: IWeatherAlertModifier[];
}

export class WeatherEventStatistics extends BaseModel implements IWeatherEventStatistics {
    public damageCost?: number | null;
    public fatalities?: number | null;
    public efRating?: number | null;
    public pathDistance?: number | null;
    public funnelWidth?: number | null;
    public saffirSimpsonRating?: number | null;
    public lowestPressure?: number | null;
    public maxWindSpeed?: number | null;
    public richterMagnitude?: number | null;
    public mercalliIntensity?: number | null;
    public aftershocks?: number | null;
    public fault?: string | null;
    public relatedTsunami?: boolean | null;

    constructor(data?: IWeatherEventStatistics) {
        super(data);
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    /**
    * Initializes a new WeatherEventStatistics instance from the specified data.
    * This method is used in the serialization/deserialization process and allows for overriding in subclasses. 
    * @param _data Any object that holds the necessary properties to initialize a new WeatherEventStatistics.
    **/
    protected init(_data?: any): void {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.damageCost = _data["damageCost"] !== undefined ? _data["damageCost"] : <any>null;
            this.fatalities = _data["fatalities"] !== undefined ? _data["fatalities"] : <any>null;
            this.efRating = _data["efRating"] !== undefined ? _data["efRating"] : <any>null;
            this.pathDistance = _data["pathDistance"] !== undefined ? _data["pathDistance"] : <any>null;
            this.funnelWidth = _data["funnelWidth"] !== undefined ? _data["funnelWidth"] : <any>null;
            this.saffirSimpsonRating = _data["saffirSimpsonRating"] !== undefined ? _data["saffirSimpsonRating"] : <any>null;
            this.lowestPressure = _data["lowestPressure"] !== undefined ? _data["lowestPressure"] : <any>null;
            this.maxWindSpeed = _data["maxWindSpeed"] !== undefined ? _data["maxWindSpeed"] : <any>null;
            this.richterMagnitude = _data["richterMagnitude"] !== undefined ? _data["richterMagnitude"] : <any>null;
            this.mercalliIntensity = _data["mercalliIntensity"] !== undefined ? _data["mercalliIntensity"] : <any>null;
            this.aftershocks = _data["aftershocks"] !== undefined ? _data["aftershocks"] : <any>null;
            this.fault = _data["fault"] !== undefined ? _data["fault"] : <any>null;
            this.relatedTsunami = _data["relatedTsunami"] !== undefined ? _data["relatedTsunami"] : <any>null;
        }
    }

    /**
     * Deserializes a JSON representation of this WeatherEventStatistics.
     * @param data Any object that holds the necessary properties to initialize a new WeatherEventStatistics.
     * @returns A deserialized WeatherEventStatistics.
     **/
    public static fromJS(data: any): WeatherEventStatistics {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherEventStatistics();
        result.init(data);
        return result;
    }

    /**
     * Serializes a JSON representation of this WeatherEventStatistics.
     * @returns A serialized WeatherEventStatistics.
     **/
    public toJSON(): any {
        let data: any = {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["damageCost"] = this.damageCost !== undefined ? this.damageCost : <any>null;
        data["fatalities"] = this.fatalities !== undefined ? this.fatalities : <any>null;
        data["efRating"] = this.efRating !== undefined ? this.efRating : <any>null;
        data["pathDistance"] = this.pathDistance !== undefined ? this.pathDistance : <any>null;
        data["funnelWidth"] = this.funnelWidth !== undefined ? this.funnelWidth : <any>null;
        data["saffirSimpsonRating"] = this.saffirSimpsonRating !== undefined ? this.saffirSimpsonRating : <any>null;
        data["lowestPressure"] = this.lowestPressure !== undefined ? this.lowestPressure : <any>null;
        data["maxWindSpeed"] = this.maxWindSpeed !== undefined ? this.maxWindSpeed : <any>null;
        data["richterMagnitude"] = this.richterMagnitude !== undefined ? this.richterMagnitude : <any>null;
        data["mercalliIntensity"] = this.mercalliIntensity !== undefined ? this.mercalliIntensity : <any>null;
        data["aftershocks"] = this.aftershocks !== undefined ? this.aftershocks : <any>null;
        data["fault"] = this.fault !== undefined ? this.fault : <any>null;
        data["relatedTsunami"] = this.relatedTsunami !== undefined ? this.relatedTsunami : <any>null;
        return data;
    }
}

export interface IWeatherEventStatistics {
    id?: number;
    damageCost?: number | null;
    fatalities?: number | null;
    efRating?: number | null;
    pathDistance?: number | null;
    funnelWidth?: number | null;
    saffirSimpsonRating?: number | null;
    lowestPressure?: number | null;
    maxWindSpeed?: number | null;
    richterMagnitude?: number | null;
    mercalliIntensity?: number | null;
    aftershocks?: number | null;
    fault?: string | null;
    relatedTsunami?: boolean | null;
}

export class WeatherExperience extends BaseModel implements IWeatherExperience {
    public name!: string;
    public description!: string;
    public startTime!: Date;
    public endTime?: Date | null;

    constructor(data?: IWeatherExperience) {
        super(data);
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    /**
    * Initializes a new WeatherExperience instance from the specified data.
    * This method is used in the serialization/deserialization process and allows for overriding in subclasses. 
    * @param _data Any object that holds the necessary properties to initialize a new WeatherExperience.
    **/
    protected init(_data?: any): void {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : <any>null;
            this.endTime = _data["endTime"] ? new Date(_data["endTime"].toString()) : <any>null;
        }
    }

    /**
     * Deserializes a JSON representation of this WeatherExperience.
     * @param data Any object that holds the necessary properties to initialize a new WeatherExperience.
     * @returns A deserialized WeatherExperience.
     **/
    public static fromJS(data: any): WeatherExperience {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherExperience();
        result.init(data);
        return result;
    }

    /**
     * Serializes a JSON representation of this WeatherExperience.
     * @returns A serialized WeatherExperience.
     **/
    public toJSON(): any {
        let data: any = {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>null;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>null;
        return data;
    }
}

export interface IWeatherExperience {
    id?: number;
    name: string;
    description: string;
    startTime: Date;
    endTime?: Date | null;
}

export class SkylightApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSkylightApiException = true;

    static isSkylightApiException(obj: any): obj is SkylightApiException {
        return obj.isSkylightApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SkylightApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}